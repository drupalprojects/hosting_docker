<?php

class Provision_Context_Server_docker extends Provision_Context_server {

  function shell_exec($command) {
    $command = "docker-compose -f {$this->config_path}/docker-compose.yml exec -T http {$command}";
    drush_log(dt('Passing command to docker-compose.  Full command: !command', array(
      '!command' => $command,
    )), 'debug');
    return drush_shell_exec(escapeshellcmd($command));
  }

  function init_server() {
    parent::init_server(); // TODO: Change the autogenerated stub
  }

  /**
   * Override for Provision_Context_server::init, because it uses regex on the class name to determine the type!
   */
  function init() {
    $this->type = 'server';
    $this->setProperty('context_type', $this->type);

    // Set up the parent of this context object.
    if (!is_null($this->parent_key)) {
      $this->setProperty($this->parent_key);
      $this->is_oid($this->parent_key);
    }

    // $this->server is always @server_master
    $this->server = '@server_master';
    $this->is_oid('server');

    // Set up subscriptions for the available services.
    $service_list = drush_command_invoke_all('provision_services');
    foreach ($service_list as $service => $default) {
      $class = "Provision_Service_{$service}";
      $func = "subscribe_{$this->type}";
      if (method_exists($class, $func)) {
        call_user_func(array($class, $func), $this);
      }
    }
    return true;
  }
}
