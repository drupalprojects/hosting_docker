<?php
/**
 * @file
 * Web server node type is defined here.
 */

/**
 * Implements hook_menu().
 */
function hosting_docker_server_menu() {
  $items['node/%node/docker'] = array(
    'access callback' => 'hosting_docker_node_docker_page_access',
    'access arguments' => array(1),
    'page callback' => 'hosting_docker_node_docker_page',
    'page arguments' => array(1),
    'title' => 'Docker',
    'file' => 'hosting_docker_server.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 *
 */
function hosting_docker_node_docker_page_access($node) {
  return user_access('access docker server information') && node_access('view', $node);
}

/**
 * Implements hook_permission().
 */
function hosting_docker_server_permission() {
  return array(
    'access docker server information' => array(
      'title' => 'Access docker server information',
      'description' => 'Access the docker information for Server nodes, such as the path to docker-compose.yml',
      'warning' => 'WARNING: This currently exposes the full docker-compose.yml file. It includes the MySQL Root password. Grant this permission only to those who you trust with the root password.'
    )
  );
}

/**
 * Implements hook_hosting_service().
 */
function hosting_docker_server_hosting_service() {
  return array(
    'apache_docker' => 'http',
    'mysql_docker' => 'db',
//    'varnish' => 'cache',
  );
}

/**
 * Implements hook_hosting_service_type()
 *
 * @TODO: After we get a web and DB container work on generic docker containers.
 */
function hosting_docker_server_hosting_service_type() {
  return array(
//    'cache' => array(
//      'title' => t('Cache'),
//    ),
  );
}

/**
 * Implements hook_node_load().
 */
function hosting_docker_server_node_load($nodes, $types) {
  if (in_array('server', $types)) {
    foreach ($nodes as $node) {
      if (hosting_docker_server_has_docker_services($node)) {
        $node->docker = array(
          'docker-compose-file' => "/var/aegir/config/{$node->hosting_name}/docker-compose.yml",
        );
      }
    }
  }
}

/**
 * Loop through services to see if any of them are docker services.
 */
function hosting_docker_server_has_docker_services($node) {

  // Detect if this server is using any docker services return TRUE;
  foreach ($node->services as $service_name => $service) {
    if (property_exists($service,'DOCKER_SERVICE')) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function hosting_docker_server_form_hosting_settings_alter(&$form, &$form_state, $form_id)
{
  $form['hostmaster_container_id'] = array(
    '#title' => t('Docker Container ID of the Hostmaster web container'),
    '#description' => t('In order for Aegir to connect to database servers, it needs to be in the same network. Enter the container ID of this hostmaster\'s web container so that we can add it to the networks created for each server node that enables docker services. To find the container ID, run <code>docker ps</code> and look for the aegir/hostmaster image.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('hostmaster_container_id', ''),
  );
  
}

/**
 * Implements hook_hosting_TASK_OBJECT_context_options().
 *
 * Load hostmaster container ID variable into drush options for server contexts.
 */
function hosting_docker_server_hosting_server_context_options(&$task)
{
  $task->options['hostmaster_container_id'] = variable_get('hostmaster_container_id', NULL);
}

/**
 * Implements hook_hosting_TASK_OBJECT_context_options().
 *
 * Load hostmaster container ID variable into drush options for server contexts.
 */
function hosting_docker_server_hosting_site_context_options(&$task)
{
  $task->options['hostmaster_container_id'] = variable_get('hostmaster_container_id', NULL);
}